Jumli-Datei
{
  *** Applikation ***;
  Version=1.3;
  {
    *** Model ***;
    MainFile="Start.java";
    OptionenCompileOne="-verbose -g";
    AufrufCompiler="javac";
    AufrufDebugger="jdb";
    RunParameter="-verbose";
    ActiveDiagramm="Tour 4: The breakpoint";
    {
      *** Package ***;
      Name="UseCases";
      ID=1;
      Zugriff=2;
      Type=2;
      {
        *** Diagramm ***;
        Name="UseCases";
        ID=2;
        DiagrammTyp=2;
      };
    };
    {
      *** Package ***;
      Name="Compiler_und_Debugger";
      ID=3;
      Zugriff=2;
      {
        *** Klasse ***;
        Name="Game";
        ID=4;
        Datentyp="class";
        FileName="Game.java";
        FileActiveLine=-1;
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku=" Das Spielfeld besteht aus 3x3 Feldern und wird durch einen int-Array \
          verwalten Für die Array-Werte gilt: 0 => leeres Feld 1 => Feld vom Benutzer \
          belegt 2 => Feld vom Computer belegt";
          Name="spielfeld";
          ID=5;
          Datentyp="int[][]";
          AttributWert="new int[3][3]";
        };
        {
          *** Methode ***;
          Doku=" Setzt das Spiel auf den Anfangszustand zurück";
          Name="clear";
          ID=6;
          Zugriff=3;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Doku=" Berechnet, ob eine Partei drei Felder in einer Reihe hat.";
          Name="istEsVorbei";
          ID=7;
          Zugriff=3;
          RueckgabeWert="void";
          Throws="Exception";
        };
        {
          *** Methode ***;
          Name="kontern";
          ID=8;
          Zugriff=3;
          RueckgabeWert="void";
          Throws="Exception";
        };
        {
          *** Methode ***;
          Doku=" Der Benutzer oder der Computer haben ein Feld im Spielfeld ausgewählt\t \
          Hier wird berechnet, ob der Zug möglich ist (Rückgabe true) und dann entsprechend \
          reagiert";
          Name="spielen";
          ID=9;
          Zugriff=3;
          RueckgabeWert="boolean";
          Throws="Exception";
          {
            *** Parameter ***;
            Typ="int";
            ParameterName="x";
          };
          {
            *** Parameter ***;
            Typ="int";
            ParameterName="y";
          };
          {
            *** Parameter ***;
            Typ="int";
            ParameterName="typ";
          };
        };
      };
      {
        *** Klasse ***;
        Doku="Diese Klasse ist das Hauptfenster. Damit das Programm richtig \nbeendet \
        wird, hat sie einen Konstruktor, in dem Jumli \nSourcecode zum Beenden \
        hinzufügt.";
        Name="GameFrame";
        ID=13;
        Datentyp="class";
        FileName="GameFrame.java";
        FileActiveLine=-1;
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="SpielFrame";
          ID=14;
        };
        {
          *** Vererbung ***;
          ID=15;
          A=13;
          B=77;
        };
      };
      {
        *** Klasse ***;
        Doku="In dieser Klasse wird gezeichnet.";
        Name="GamePanel";
        ID=16;
        Datentyp="class";
        FileName="GamePanel.java";
        FileActiveLine=-1;
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="GamePanel";
          ID=17;
        };
        {
          *** Methode ***;
          Name="SpielPanel";
          ID=18;
        };
        {
          *** Methode ***;
          Doku="\n\nInvoked when the mouse button has been clicked (pressed\n and \
          released) on a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
          Name="mouseClicked";
          ID=19;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Typ="MouseEvent";
            ParameterName="e";
          };
        };
        {
          *** Methode ***;
          Doku="\n\nInvoked when the mouse enters a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
          Name="mouseEntered";
          ID=21;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Typ="MouseEvent";
            ParameterName="e";
          };
        };
        {
          *** Methode ***;
          Doku="\n\nInvoked when the mouse exits a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
          Name="mouseExited";
          ID=23;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Typ="MouseEvent";
            ParameterName="e";
          };
        };
        {
          *** Methode ***;
          Doku="\n\nInvoked when a mouse button has been pressed on a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
          Name="mousePressed";
          ID=25;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Typ="MouseEvent";
            ParameterName="e";
          };
        };
        {
          *** Methode ***;
          Doku="\n\nInvoked when a mouse button has been released on a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
          Name="mouseReleased";
          ID=27;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Typ="MouseEvent";
            ParameterName="e";
          };
        };
        {
          *** Methode ***;
          Name="paintComponent";
          ID=29;
          Zugriff=1;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Typ="Graphics";
            ParameterName="graphics";
          };
        };
        {
          *** Aggregation ***;
          ID=31;
          Datentyp="Game";
          Zugriff=2;
          A=16;
          B=4;
          RollenName="game";
        };
        {
          *** Vererbung ***;
          ID=32;
          A=16;
          B=147;
          IstRealize=true;
        };
        {
          *** Vererbung ***;
          ID=33;
          A=16;
          B=126;
        };
      };
      {
        *** Klasse ***;
        Doku="Diese Klasse hat die main()-Methode \nund ist nur dazu da, das Spiel \
        zu starten.";
        Name="Start";
        ID=34;
        Datentyp="class";
        FileName="Start.java";
        FileActiveLine=-1;
        HeaderFileActiveLine=-1;
        IsMain=true;
        Parent=-1;
        {
          *** Methode ***;
          Name="main";
          ID=35;
          IsStatic=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Typ="String[]";
            ParameterName="args";
          };
        };
      };
      {
        *** DotLine ***;
        ID=37;
        Zugriff=2;
        A=65;
        B=16;
      };
      {
        *** Diagramm ***;
        Name="Tour 1: The game";
        ID=38;
        {
          *** CJumliTracker ***;
          Rechteck=11,194,96,253;
          UMLElementID=34;
          IsWithAttributs=true;
          IsWithMethods=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=278,213,417,364;
          UMLElementID=16;
          IsWithMethods=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=148,195,243,254;
          UMLElementID=13;
          IsWithAttributs=true;
          IsWithMethods=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=274,97,383,156;
          UMLElementID=126;
          IsWithAttributs=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=79,94,188,153;
          UMLElementID=77;
          IsWithAttributs=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=443,96,528,155;
          UMLElementID=4;
        };
        {
          *** VererbungZeichner ***;
          Rechteck=150,163,157,170;
          UMLElementID=15;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          UMLElementID=33;
          TextOffset=0,5;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=500,177,529,191;
          UMLElementID=31;
          Knick=493,221;
          TextOffset=0,5;
          OffsetRollenName=23,-12;
          OffsetA=5,5;
          OffsetB=5,5;
          {
            *** Linie ***;
            Punkt=493,221;
          };
        };
        {
          *** NotizZeichner ***;
          Rechteck=472,255,815,377;
          UMLElementID=62;
        };
        {
          *** NotizZeichner ***;
          Rechteck=12,7,274,66;
          UMLElementID=63;
        };
      };
      {
        *** Diagramm ***;
        Name="Tour 2: The compiler";
        ID=39;
        {
          *** CJumliTracker ***;
          Rechteck=21,183,160,337;
          UMLElementID=16;
          IsWithAttributs=true;
          IsWithMethods=true;
        };
        {
          *** NotizZeichner ***;
          Rechteck=24,20,368,142;
          UMLElementID=64;
        };
        {
          *** NotizZeichner ***;
          Rechteck=187,198,550,290;
          UMLElementID=71;
        };
      };
      {
        *** Diagramm ***;
        Name="Tour 3: The debugger";
        ID=40;
        {
          *** NotizZeichner ***;
          Rechteck=14,11,361,92;
          UMLElementID=65;
        };
        {
          *** NotizZeichner ***;
          Rechteck=15,128,355,273;
          UMLElementID=66;
        };
      };
      {
        *** Diagramm ***;
        Name="Tour 4: The breakpoint";
        ID=41;
        {
          *** NotizZeichner ***;
          Rechteck=17,17,418,210;
          UMLElementID=67;
        };
        {
          *** NotizZeichner ***;
          Rechteck=22,341,383,422;
          UMLElementID=72;
        };
        {
          *** NotizZeichner ***;
          Rechteck=24,233,508,314;
          UMLElementID=73;
        };
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nÜber \"Datei Neu\" kann man ein neues Projekt anlegen.\nIn \
        diesem Fall ein Java-Projekt. \nWichtig ist, dass man ein Projekt- Verzeichnis \
        angibt, \ndas KEINE Leerstellen oder Sonderzeichen hat, da einige Compiler\ndiese \
        nicht verarbeiten können.";
        ID=42;
      };
      {
        *** Notiz ***;
        Doku="Info 4:\nUnten ist das Nachrichtenfenster.\nHier werden folgende \
        Informationen angezeigt:\n- Die Dokumentation eines selektierten Modellelements\n- \
        Meldungen von Jumli an den User\n- Compile Meldungen\n- Meldungen der Programme, \
        die man programmiert hat\n- Meldungen eines Debuggers\n\nFalls eine Meldung \
        die Angabe einer Datei und einer Zeile \nbeinhaltet (z.B. bei einem Compile-Error \
        ), kann man  duch \nDoppelklick auf diese Zeile die Datei öffnen.";
        ID=43;
      };
      {
        *** Notiz ***;
        Doku="Info 3:\nHier ist das Modellfenster, in dem man das UML-Modell erstellt.\nDazu \
        gibt es unterschiedliche Diagrammtypen, wobei immer\nein Klassendiagramm \
        als Standard erzeugt wird.\n\nEin Doppelklick auf ein Element öffnet einen \
        Dialog (wie z.B. bei \ndieser Notiz), in dem man die Eigenschaften des \
        Elements \nangeben kann. Mit einem einfachem Klick kann man die \nDokumentation \
        des Elements im Nachrichtenfenster anschauen.\n\nEin Diagramm ist immer \
        nur eine Teilansicht eines Modells. Die\ngesamte Übersicht findet man im \
        Projektbaum => Info 2\n\nWie man ein Diagramm erstellt, zeigt Tour 2";
        ID=44;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nLinks ist der Projektbaum. Als Standard wird ein UseCase- \
        und\nein Projekt- Package erstellt. Alles, was hier zu sehen ist, macht \
        \ndas gesamte Projekt aus. Diagramme sind grundsätzlich nur\neine Ansicht \
        auf das Modell.\n- Im Projektbaum kann mit einem einfachen Klick zwischen \
        den\nElementen wechseln.\n- Mit einem Doppelklick öffnet sich der entsprechende \
        \nBearbeitungsdialog.\n- Mit der rechten Maustaste erhält man ein Kontextmenü.";
        ID=45;
      };
      {
        *** Notiz ***;
        Doku="Info 5:\nUnd jetzt machen wir ein Java-Programm\nWeiter gehts im \
        Diagramm \"Tour 2\" durch einen Klick \nim Projektbaum.";
        ID=46;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nEin Diagramm erstellt man über das Menü oder die Toolbar.\nIn \
        diesem Fall ist es ein Klassendiagramm, weil wir eine Klasse\nerstellen \
        wollen.";
        ID=47;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nEine Klasse erstellt man über das Menü oder die Toolbar. \
        Dannach\nklickt man an der Stelle im Diagramm, an der man die Klasse erzeugen\nwill.\nZuerst \
        startet ein Dialog, in dem man die Eigenschaften der Klasse \nangeben kann. \
        In der Dokumentation der Klasse haben wir angegeben,\nwelche Einstellungen \
        wir für sie gemacht haben => einfach auf die Klasse\nklicken und die Dokumentation \
        wird im Nachrichtenfenster angezeigt.";
        ID=48;
      };
      {
        *** Notiz ***;
        Doku="Info 3:\nAlle Elemente in einem Diagramm kann man löschen. Dabei \
        muß man \nzwischen dem Entfernen aus dem Diagramm und dem Löschen aus \ndem \
        Modell unterscheiden. Da Diagramme immer nur Teilansichten\ndes gesamten \
        Modells darstellen, wird ein Element nicht automatisch \ngelöscht, wenn \
        es aus dem Diagramm entfernt wurde.\n\n<Entf> löscht nur aus dem Diagramm. \
        Das Entfernen aus dem Modell\nfunktioniert nur über die Dialoge (Doppelklick \
        auf das Element)\n\nÜbung:\nDie Klassen soll aus dem Diagramm mit der Taste \
        <Entf> gelöscht werden.\nDanach die Klassen wieder in das Diagramm einfügen, \
        indem man \nim Projektbaum die Klasse selektiert und in das Diagramm zieht.";
        ID=49;
      };
      {
        *** Notiz ***;
        Doku="Info 4:\nZu jedem Element gibt es immer ein Kontextmenü, das man \
        mit\neinem Rechtsklick der Maus erreicht.";
        ID=50;
      };
      {
        *** Notiz ***;
        Doku="Info 5:\nJetzt machen wir unser erstes Programm. \nWeiter gehts im \
        Diagramm \"Tour 3\" durch einen Klick \nim Projektbaum.";
        ID=51;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nIn diesem Diagramm wurde die Klasse aus dem Projektbaum \
        in das \nDiagramm gezogen, damit sie auch hier sichtbar ist.";
        ID=52;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nMit dem Toolbar-Button \"Ansicht wechseln\" kann man zwischen \
        Modelldiagramm\nund dem Editor mit der Dateiansicht schnell wechseln. In \
        manchen Fällen \nwechselt Jumli selbst die Ansicht.\n\nÜbung: \nEinfach \
        mal den Button \"Ansicht wechseln\" ausprobieren.";
        ID=53;
      };
      {
        *** Notiz ***;
        Doku="Info 3:\nJetzt machen wir ein Programm:\nÜbung:\n1: Durch einen Klick \
        mit der rechten Maustaste auf die Klasse\nund der Auswahl \"Sourcecode \
        generieren\" wird eine Java-Datei erzeugt.\n2: In der Methode main() den \
        Befehl \"System.out.println( \"Hallo\" );\" \neingeben.\n3: Über die Toolbar \
        über den Button \"Compile/Run/Debug\" und das\nUntermenü die Datei compilieren. \
        Jetzt sollten im Nachrichtenfenster\ndie Meldungen des Compilers erscheinen. \
        Und es sollten keine Fehler\nauftreten, es sei denn, man hat kein JDK installiert \
        => Tour 0 oder man\nhat über den Klassendialog die Klasse geändert und \
        das wäre schlecht.";
        ID=54;
      };
      {
        *** Notiz ***;
        Doku="Info 4:\nNachdem die Datei compiliert wurde, kann man das Programm \
        starten.\nZur Zeit macht unser Programm nichts anderes, als die Nachricht \
        \n\"Hallo\" zu senden. Da Jumli alle Nachrichten abfängt, wird sie im \nNachrichtenfenster \
        angezeigt. Zusätzlich sieht man die Nachrichten\nvon Jumli an die Virtual \
        Machine (Laufzeitumgebung) von Java und\ndie Antworten.\n\nÜbung:\n Über \
        die Toolbar über den Button \"Compile/Run/Debug\" und das\nUntermenü mit \
        \"Run\" das Programm starten.";
        ID=55;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nUns erreichen viele Anfragen von Benutzern, bei denen\nes \
        zu Fehlermeldungen beim Compilieren wegen einem \nfehlenden oder nicht \
        gefundenen JDK kommt.\nWichtig ist, dass man das JDK und die zugehörige \
        Dokumentation\ninstalliert hat, die nicht Bestandteil von Jumli sind.\n\nFalls \
        es trotz einer Installation zu Fehlermeldungen kommt, sollte man\nversuchen, \
        über das Menü \"Optionen/ JDK-Optionen\" die \nVerzeichnisse anzugeben. \
        \n\nWeitere Informationen gibt es auf unserer Homepage www.jumli.de\nbei \
        den FAQ's.";
        ID=56;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nJetzt machen wir ein Programm mit einem eigenen Fenster. \
        Dazu sollte man bei Java\ndie entsprechenden JDK-Klassen verwenden.\n\nWenn \
        alle Bedingungen wie im Diagramm \"Voraussetzungen\" erfüllt\nsind, sollte \
        es unterhalb des Projektbaums den Button \"JDK\" geben.\nJedesmal wenn \
        ein neues oder bestehendes Projekt geöffnet wird,\nversucht Jumli die Dokumentation \
        des zugrundeliegenden Systems\n- in unserem Fall das JDK - zu analysieren \
        und zeigt das Ergebnis\nim Projektbaum an.\n\nHier wurde schon mal die \
        JDK-Klasse \"JFrame\" eingefügt.\n\nÜbung:\n1: Nach \"JDK\" wechseln.\n2: \
        Eine Klasse durch Doppelklick auswählen.\nDanach müsste die entsprechene \
        Originaldokumentation angezeigt werden\n3: Im Package \"javax.swing\" die \
        Klasse \"JPanel\" selektieren und ins \nDiagramm ziehen\". Jumli versucht \
        jetzt, die Originaldokumentation zu analysieren \nund erzeugt eine Klasse \
        mit Attributen und Methoden. Die Klasse wird jetzt im \n\"Extern\" -Package \
        im Projektbaum in der \"Projekt\" Ansicht angzeigt.\n\nFalls es hier zu \
        Fehlern kommt, sollte man unter \"Tour 0 Voraussetzungen\"\nnachschauen.";
        ID=57;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nJumli zeigt die Hilfe von anderen Systemen wie z.B. dem \
        JDK in einem\nHTML-Browser an. Also sollte man einen solchen installiert \
        haben.";
        ID=58;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nEine externe Klasse wird in einer anderen Farbe angezeigt \
        und \nman kann keinen Sourcecode generieren.\n\nNormalerweise will man \
        zur Übersichtlichkeit die Klasse ohne Attribute\nund ohne Methoden darstellen. \
        Dies kann man über das Kontextmenü \n(rechte Maustaste) einstellen.";
        ID=59;
      };
      {
        *** Notiz ***;
        Doku="Info 3:\nEs kann zu Problemen kommen, wenn:\n\n- Ältere Windows 98-Versionen \
        eingesetzt werden.\n- Die Benutzerrechte vom Systemadministrator stark \
        eingeschränkt wurden.\n- Man neuere Projekte mit älteren Jumli-Versionen \
        öffnet.\n- Jumli auf einem Server- Netz-Laufwerk installiert wurde und \
        mehrere\nBenutzer gleichzeitig darauf zugreifen.\n- Projekte auf einem \
        Netzlaufwerk von mehreren Benutzern gleichzeitig\nbearbeitet werden.";
        ID=60;
      };
      {
        *** Notiz ***;
        Doku="Info 3:\nWeiter gehts im Diagramm \"Tour 5\" durch einen Klick \nim \
        Projektbaum.";
        ID=61;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nWe use a copy of the simple game from tour 2.\n\nFirst of \
        all, you have to compile the program by selecting\nthe toolbar-button  \
        \"Compile/Debug/Run\" and \"Compile all\" .\n\nNow you can start the program \
        with \"Compile/Debug/Run\" and \"Run\".";
        ID=62;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nIn this example we explain the compiler and debugger.";
        ID=63;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\n\nWith \"Compile all\" you can compile all files included \
        in the project.\n\nTo compile a single file, select the file in the edit-view. \
        \nChange to the edit-view (context-menu or \"Files\"-tab in the project-tree),\nand \
        compile the file with \"Compile file\".";
        ID=64;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\n\nLet's start a degug session. Remove the error from \"Tour \
        2\" and make \nan executable program by \"Compile all\".";
        ID=65;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nStart the debugger in the toolbar with \"Compile/Debug/Run\" \
        and\n\"Debug\".\n\nFirst of all, the virtual machine starts and then the \
        debugger waits for\nthe \"start\"-command (toolbar).\n\nWith \"run\", the \
        program executes.";
        ID=66;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nMit dem Setzen eines Haltepunkts kann man das Programm an \
        einer gewünschten\nStelle anhalten und den Zustand von Variablen anschauen \
        oder die Ausführung \ndes Programms zeilenweise durchführen.\n\nDa unser \
        Programm schon läuft, setzen wir einen Haltepunkt an die erste\nZeile der \
        Methode \"spielen()\" in der Klasse \"Spiel\", indem im Editor\ndie Zeile \
        mit dem Cursor gewählt wird und der Toolbar-Button \"Haltepunkt setzen\"\ngedrückt \
        wird.\n\nWeitere Informationen stehen im Sourcecode.";
        ID=67;
      };
      {
        *** Notiz ***;
        Doku="Info 1:\nJetzt fehlt noch die Beziehung vom Panel zum Spiel.\n\nDazu \
        sollte man die Klassen \"Spiel\" und \"SpielPanel\" aus dem Projektbaum\nin \
        dieses Diagramm ziehen. Anschliessend über die Toolbar eine \"Assoziation\"\nauswählen \
        und ausgehend von \"SpielPanel\" bis \"Spiel\" eine Assoziation\nerstellen. \
        \n\nIm Assoziationendialog spezifiziert man die Assoziation als Aggregation.";
        ID=68;
      };
      {
        *** Notiz ***;
        Doku="Info2:\nJetzt noch über das Kontextmenü \noder die Toolbar die Klasse \
        \"SpielPanel\"\nerneut generieren und im Sourcecode \nalle auskommentierten \
        Stellen mit\nHinweis auf Tour 5 einkommentieren.";
        ID=69;
      };
      {
        *** Notiz ***;
        Doku="Info 3:\nAnschliessend alles compilieren und \nman kann spielen.";
        ID=70;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nNow make an error e.g. in the method paintComponent() and \
        compile again.\n\na double-click on the error message leads you to the \
        file and line,\nwhere you can find the error.";
        ID=71;
      };
      {
        *** Notiz ***;
        Doku="Info 3:\nAchtung: Der Debugger ist sehr empfindlich. Manchmal kann \
        es sein, \ndass er und die Virtual Machine nicht mehr reagieren. Dann hilft \
        nur noch,\ndie Prozesse über den Task Manager (Windows) zu beenden.";
        ID=72;
      };
      {
        *** Notiz ***;
        Doku="Info 2:\nMan kann den Debugger über \"Stop\" beenden. Das funktioniert \
        allerdings nur, wenn das Programm\ndurch einen Haltepunkt angehalten wurde. \
        Wenn das Programm ausgeführt wird, beendet man den\nDebugger, indem man \
        das Programm direkt beendet.";
        ID=73;
      };
    };
    {
      *** Package ***;
      Name="Extern";
      ID=74;
      Zugriff=2;
      Type=1;
      {
        *** Package ***;
        Name="javax";
        ID=75;
        Zugriff=2;
        Type=1;
        {
          *** Package ***;
          Name="swing";
          ID=76;
          Zugriff=2;
          Type=1;
          {
            *** Klasse ***;
            Name="JFrame";
            ID=77;
            Datentyp="class";
            IsExtern=true;
            FileActiveLine=-1;
            HeaderFileActiveLine=-1;
            IsGenerate=true;
            Parent=-1;
            {
              *** Methode ***;
              Name="JFrame";
              ID=85;
              Throws="HeadlessException";
            };
            {
              *** Methode ***;
              Doku="Creates a Frame in the specified\n GraphicsConfiguration of\n a screen \
              device and a blank title.\n \n This constructor sets the component's locale \
              property to the value \n returned by JComponent.getDefaultLocale.\n\nParameters:<DD><CODE>gc</CODE> \
              - the <code>GraphicsConfiguration</code> that is used\n \t\tto construct \
              the new <code>Frame</code>;\n \t\tif <code>gc</code> is <code>null</code>, \
              the system\n \t\tdefault <code>GraphicsConfiguration</code> is assumed\n<DT><B>Throws:</B>\n<DD><CODE><A \
              HREF=\"../../java/lang/IllegalArgumentException.html\">IllegalArgumentException</A></CODE> \
              - if <code>gc</code> is not from\n \t\ta screen device.  This exception \
              is always thrown when\n      GraphicsEnvironment.isHeadless() returns true.<DT><B>Since:</B><DD>1.3</DD>";
              Name="JFrame";
              ID=83;
              {
                *** Parameter ***;
                Typ="GraphicsConfiguration";
                ParameterName="gc";
              };
            };
            {
              *** Methode ***;
              Name="JFrame";
              ID=81;
              Throws="HeadlessException";
              {
                *** Parameter ***;
                Typ="String";
                ParameterName="title";
              };
            };
            {
              *** Methode ***;
              Doku="Creates a JFrame with the specified title and the\n specified GraphicsConfiguration \
              of a screen device.\n \n This constructor sets the component's locale property \
              to the value \n returned by JComponent.getDefaultLocale.\n\nParameters:<DD><CODE>title</CODE> \
              - the title to be displayed in the\n \t\tframe's border. A <code>null</code> \
              value is treated as\n \t\tan empty string, \"\".<DD><CODE>gc</CODE> - the \
              <code>GraphicsConfiguration</code> that is used\n \t\tto construct the \
              new <code>JFrame</code> with;\n\t\tif <code>gc</code> is <code>null</code>, \
              the system\n \t\tdefault <code>GraphicsConfiguration</code> is assumed\n<DT><B>Throws:</B>\n<DD><CODE><A \
              HREF=\"../../java/lang/IllegalArgumentException.html\">IllegalArgumentException</A></CODE> \
              - if <code>gc</code> is not from\n \t\ta screen device.  This exception \
              is always thrown when\n      GraphicsEnvironment.isHeadless() returns true.<DT><B>Since:</B><DD>1.3</DD>";
              Name="JFrame";
              ID=78;
              {
                *** Parameter ***;
                Typ="String";
                ParameterName="title";
              };
              {
                *** Parameter ***;
                Typ="GraphicsConfiguration";
                ParameterName="gc";
              };
            };
            {
              *** Methode ***;
              Doku="By default, children may not be added directly to this component,\n \
              they must be added to its contentPane instead.  For example:\n \n thisComponent.getContentPane().add(child)\n \
              \n An attempt to add to directly to this component will cause an\n runtime \
              exception to be thrown.  Subclasses can disable this\n behavior.";
              Name="addImpl";
              ID=86;
              Zugriff=1;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="Component";
                ParameterName="comp";
              };
              {
                *** Parameter ***;
                Typ="Object";
                ParameterName="constraints";
              };
              {
                *** Parameter ***;
                Typ="int";
                ParameterName="index";
              };
            };
            {
              *** Methode ***;
              Doku="Called by the constructor methods to create the default\n rootPane.";
              Name="createRootPane";
              ID=90;
              Zugriff=1;
              RueckgabeWert="JRootPane";
            };
            {
              *** Methode ***;
              Doku="Called by the constructors to init the JFrame properly.";
              Name="frameInit";
              ID=91;
              Zugriff=1;
              RueckgabeWert="void";
            };
            {
              *** Methode ***;
              Doku="Gets the AccessibleContext associated with this JFrame. \n For JFrames, \
              the AccessibleContext takes the form of an \n AccessibleJFrame. \n A new \
              AccessibleJFrame instance is created if necessary.";
              Name="getAccessibleContext";
              ID=92;
              RueckgabeWert="AccessibleContext";
            };
            {
              *** Methode ***;
              Doku="Returns the contentPane object for this frame.";
              Name="getContentPane";
              ID=93;
              RueckgabeWert="Container";
            };
            {
              *** Methode ***;
              Doku="Returns the operation that occurs when the user\n initiates a \"close\" \
              on this frame.";
              Name="getDefaultCloseOperation";
              ID=94;
              RueckgabeWert="int";
            };
            {
              *** Methode ***;
              Doku="Returns the glassPane object for this frame.";
              Name="getGlassPane";
              ID=95;
              RueckgabeWert="Component";
            };
            {
              *** Methode ***;
              Doku="Returns the menubar set on this frame.";
              Name="getJMenuBar";
              ID=96;
              RueckgabeWert="JMenuBar";
            };
            {
              *** Methode ***;
              Doku="Returns the layeredPane object for this frame.";
              Name="getLayeredPane";
              ID=97;
              RueckgabeWert="JLayeredPane";
            };
            {
              *** Methode ***;
              Doku="Returns the rootPane object for this frame.";
              Name="getRootPane";
              ID=98;
              RueckgabeWert="JRootPane";
            };
            {
              *** Methode ***;
              Doku="Returns true if newly created JFrames should have their\n Window \
              decorations provided by the current look and feel. This is only\n a hint, \
              as certain look and feels may not support this feature.";
              Name="isDefaultLookAndFeelDecorated";
              ID=99;
              IsStatic=true;
              RueckgabeWert="boolean";
            };
            {
              *** Methode ***;
              Doku="Returns whether calls to add and \n setLayout cause an exception \
              to be thrown.";
              Name="isRootPaneCheckingEnabled";
              ID=100;
              Zugriff=1;
              RueckgabeWert="boolean";
            };
            {
              *** Methode ***;
              Doku="Returns a string representation of this JFrame.\n This method \n \
              is intended to be used only for debugging purposes, and the \n content \
              and format of the returned string may vary between      \n implementations. \
              The returned string may be empty but may not \n be null.";
              Name="paramString";
              ID=101;
              Zugriff=1;
              RueckgabeWert="String";
            };
            {
              *** Methode ***;
              Doku="Processes window events occurring on this component.\n Hides the \
              window or disposes of it, as specified by the setting\n of the defaultCloseOperation \
              property.";
              Name="processWindowEvent";
              ID=102;
              Zugriff=1;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="WindowEvent";
                ParameterName="e";
              };
            };
            {
              *** Methode ***;
              Doku="Removes the specified component from this container.";
              Name="remove";
              ID=104;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="Component";
                ParameterName="comp";
              };
            };
            {
              *** Methode ***;
              Doku="Sets the contentPane property. \n This method is called by the constructor.";
              Name="setContentPane";
              ID=106;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="Container";
                ParameterName="contentPane";
              };
            };
            {
              *** Methode ***;
              Doku="Sets the operation that will happen by default when\n the user initiates \
              a \"close\" on this frame.\n You must specify one of the following choices:\n \
              \n \n DO_NOTHING_ON_CLOSE\n (defined in WindowConstants):\n Don't do anything; \
              require the\n program to handle the operation in the windowClosing\n method \
              of a registered WindowListener object.\n\n HIDE_ON_CLOSE\n (defined in \
              WindowConstants):\n Automatically hide the frame after\n invoking any registered \
              WindowListener\n objects.\n\n DISPOSE_ON_CLOSE\n (defined in WindowConstants):\n \
              Automatically hide and dispose the \n frame after invoking any registered \
              WindowListener\n objects.\n\n EXIT_ON_CLOSE\n (defined in JFrame):\n Exit \
              the application using the System exit method.\n Use this only in applications.\n \
              \n \n The value is set to HIDE_ON_CLOSE by default.";
              Name="setDefaultCloseOperation";
              ID=108;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="int";
                ParameterName="operation";
              };
            };
            {
              *** Methode ***;
              Doku="Provides a hint as to whether or not newly created JFrames\n should \
              have their Window decorations (such as borders, widgets to\n close the \
              window, title...) provided by the current look\n and feel. If defaultLookAndFeelDecorated \
              is true,\n the current LookAndFeel supports providing window\n decorations, \
              and the current window manager supports undecorated\n windows, then newly \
              created JFrames will have their\n Window decorations provided by the current \
              LookAndFeel.\n Otherwise, newly created JFrames will have their\n Window \
              decorations provided by the current window manager.\n \n You can get the \
              same effect on a single JFrame by doing the following:\n \n    JFrame frame \
              = new JFrame();\n    frame.setUndecorated(true);\n    frame.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);";
              Name="setDefaultLookAndFeelDecorated";
              ID=110;
              IsStatic=true;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="boolean";
                ParameterName="defaultLookAndFeelDecorated";
              };
            };
            {
              *** Methode ***;
              Doku="Sets the glassPane property. \n This method is called by the constructor.";
              Name="setGlassPane";
              ID=112;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="Component";
                ParameterName="glassPane";
              };
            };
            {
              *** Methode ***;
              Doku="Sets the menubar for this frame.";
              Name="setJMenuBar";
              ID=114;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="JMenuBar";
                ParameterName="menubar";
              };
            };
            {
              *** Methode ***;
              Doku="Sets the layeredPane property.\n This method is called by the constructor.";
              Name="setLayeredPane";
              ID=116;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="JLayeredPane";
                ParameterName="layeredPane";
              };
            };
            {
              *** Methode ***;
              Doku="By default the layout of this component may not be set,\n the layout \
              of its contentPane should be set instead.  \n For example:\n \n thisComponent.getContentPane().setLayout(new \
              GridLayout(1, 2))\n \n An attempt to set the layout of this component will \
              cause an\n runtime exception to be thrown.  Subclasses can disable this\n \
              behavior.";
              Name="setLayout";
              ID=118;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="LayoutManager";
                ParameterName="manager";
              };
            };
            {
              *** Methode ***;
              Doku="Sets the rootPane property. \n This method is called by the constructor.";
              Name="setRootPane";
              ID=120;
              Zugriff=1;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="JRootPane";
                ParameterName="root";
              };
            };
            {
              *** Methode ***;
              Doku="Determines whether calls to add and \n setLayout will cause an exception \
              to be thrown.";
              Name="setRootPaneCheckingEnabled";
              ID=122;
              Zugriff=1;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="boolean";
                ParameterName="enabled";
              };
            };
            {
              *** Methode ***;
              Doku="Just calls paint(g).  This method was overridden to \n prevent an \
              unnecessary call to clear the background.";
              Name="update";
              ID=124;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="Graphics";
                ParameterName="g";
              };
            };
          };
          {
            *** Klasse ***;
            Name="JPanel";
            ID=126;
            Datentyp="class";
            IsExtern=true;
            FileActiveLine=-1;
            HeaderFileActiveLine=-1;
            IsGenerate=true;
            Parent=-1;
            {
              *** Methode ***;
              Name="JPanel";
              ID=132;
              {
                *** Parameter ***;
                Typ="LayoutManager";
                ParameterName="layout";
              };
              {
                *** Parameter ***;
                Typ="boolean";
                ParameterName="isDoubleBuffered";
              };
            };
            {
              *** Methode ***;
              Name="JPanel";
              ID=130;
              {
                *** Parameter ***;
                Typ="LayoutManager";
                ParameterName="layout";
              };
            };
            {
              *** Methode ***;
              Name="JPanel";
              ID=128;
              {
                *** Parameter ***;
                Typ="boolean";
                ParameterName="isDoubleBuffered";
              };
            };
            {
              *** Methode ***;
              Name="JPanel";
              ID=127;
            };
            {
              *** Methode ***;
              Doku="Gets the AccessibleContext associated with this JPanel. \n For JPanels, \
              the AccessibleContext takes the form of an \n AccessibleJPanel. \n A new \
              AccessibleJPanel instance is created if necessary.";
              Name="getAccessibleContext";
              ID=135;
              RueckgabeWert="AccessibleContext";
            };
            {
              *** Methode ***;
              Doku="Returns the look and feel (L&F) object that renders this component.";
              Name="getUI";
              ID=136;
              RueckgabeWert="PanelUI";
            };
            {
              *** Methode ***;
              Doku="Returns a string that specifies the name of the L&F class\n that \
              renders this component.";
              Name="getUIClassID";
              ID=137;
              RueckgabeWert="String";
            };
            {
              *** Methode ***;
              Doku="Returns a string representation of this JPanel. This method \n is \
              intended to be used only for debugging purposes, and the \n content and \
              format of the returned string may vary between      \n implementations. \
              The returned string may be empty but may not \n be null.";
              Name="paramString";
              ID=138;
              Zugriff=1;
              RueckgabeWert="String";
            };
            {
              *** Methode ***;
              Doku="Sets the look and feel (L&F) object that renders this component.";
              Name="setUI";
              ID=139;
              RueckgabeWert="void";
              {
                *** Parameter ***;
                Typ="PanelUI";
                ParameterName="ui";
              };
            };
            {
              *** Methode ***;
              Doku="Resets the UI property with a value from the current look and feel.";
              Name="updateUI";
              ID=141;
              RueckgabeWert="void";
            };
          };
          {
            *** Diagramm ***;
            Name="swing";
            ID=142;
          };
        };
        {
          *** Diagramm ***;
          Name="javax";
          ID=143;
        };
      };
      {
        *** Package ***;
        Name="java";
        ID=144;
        Zugriff=2;
        Type=1;
        {
          *** Package ***;
          Name="awt";
          ID=145;
          Zugriff=2;
          Type=1;
          {
            *** Package ***;
            Name="event";
            ID=146;
            Zugriff=2;
            Type=1;
            {
              *** Klasse ***;
              Name="MouseListener";
              Stereotype="Interface";
              ID=147;
              Image="Interface";
              Datentyp="interface";
              IsExtern=true;
              FileName="MouseListener.java";
              FileActiveLine=-1;
              HeaderFileActiveLine=-1;
              IsInterface=true;
              IsGenerate=true;
              Parent=-1;
              {
                *** Methode ***;
                Doku="\n\nInvoked when the mouse button has been clicked (pressed\n and \
                released) on a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
                Name="mouseClicked";
                ID=148;
                RueckgabeWert="void";
                {
                  *** Parameter ***;
                  Typ="MouseEvent";
                  ParameterName="e";
                };
              };
              {
                *** Methode ***;
                Doku="\n\nInvoked when the mouse enters a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
                Name="mouseEntered";
                ID=150;
                RueckgabeWert="void";
                {
                  *** Parameter ***;
                  Typ="MouseEvent";
                  ParameterName="e";
                };
              };
              {
                *** Methode ***;
                Doku="\n\nInvoked when the mouse exits a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
                Name="mouseExited";
                ID=152;
                RueckgabeWert="void";
                {
                  *** Parameter ***;
                  Typ="MouseEvent";
                  ParameterName="e";
                };
              };
              {
                *** Methode ***;
                Doku="\n\nInvoked when a mouse button has been pressed on a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
                Name="mousePressed";
                ID=154;
                RueckgabeWert="void";
                {
                  *** Parameter ***;
                  Typ="MouseEvent";
                  ParameterName="e";
                };
              };
              {
                *** Methode ***;
                Doku="\n\nInvoked when a mouse button has been released on a component.\n\n<DL>\n</DL>\n</DD>\n<DD><DL>\n</DL>";
                Name="mouseReleased";
                ID=156;
                RueckgabeWert="void";
                {
                  *** Parameter ***;
                  Typ="MouseEvent";
                  ParameterName="e";
                };
              };
            };
            {
              *** Diagramm ***;
              Name="event";
              ID=158;
            };
          };
          {
            *** Diagramm ***;
            Name="awt";
            ID=159;
          };
        };
        {
          *** Diagramm ***;
          Name="java";
          ID=160;
        };
      };
      {
        *** Diagramm ***;
        Name="Extern";
        ID=161;
      };
    };
    {
      *** JarFiles ***;
      FileName="C:\\j2sdk1.4.0\\demo\\jfc\\Java2D\\Java2Demo.jar";
      ActiveLine=-8.4215e+008;
    };
  };
};
